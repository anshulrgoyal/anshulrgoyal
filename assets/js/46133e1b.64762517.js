(self.webpackChunkanshulrgoyal=self.webpackChunkanshulrgoyal||[]).push([[4373],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2738:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],u={id:"projects",title:"Contributions and Projects"},s=void 0,c={unversionedId:"projects",id:"projects",isDocsHomePage:!1,title:"Contributions and Projects",description:"Docusaurus",source:"@site/docs/projects.md",sourceDirName:".",slug:"/projects",permalink:"/anshulrgoyal/projects",version:"current",frontMatter:{id:"projects",title:"Contributions and Projects"},sidebar:"defaultSidebar"},l=[{value:"Docusaurus",id:"docusaurus",children:[]},{value:"Imageflow",id:"imageflow",children:[{value:"Imageflow Node",id:"imageflow-node",children:[]},{value:"Imageflow Go",id:"imageflow-go",children:[]}]},{value:"Bust",id:"bust",children:[]},{value:"Imdb Scrapper",id:"imdb-scrapper",children:[]},{value:"Unbaked Potato",id:"unbaked-potato",children:[]}],p={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"docusaurus"},"Docusaurus"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docusaurus.io"},"Docusaurus")," is an open-source documentation website generation. I contributing docusaurus by creating tools to migrate docusaurus version 1 to version 2. I also updated CLI for better user experience and creating a design for option and config validation provided to plugin and themes."),(0,a.kt)("h2",{id:"imageflow"},"Imageflow"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"imageflow")," provides operation for GIF, PNG, WebP and JPEG. The batch operations can be performed using API which creates a directed graph."),(0,a.kt)("h3",{id:"imageflow-node"},"Imageflow Node"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/imazen/imageflow-node"},(0,a.kt)("inlineCode",{parentName:"a"},"imageflow-node"))," is an image manipulation library for Node.js. ",(0,a.kt)("inlineCode",{parentName:"p"},"imageflow-node")," is binding for ",(0,a.kt)("inlineCode",{parentName:"p"},"libimageflow"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"imageflow-node")," uses NAPI for communicating with rust side of code. It is written in Rust and Typescript."),(0,a.kt)("h3",{id:"imageflow-go"},"Imageflow Go"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/imazen/imageflow-go"},(0,a.kt)("inlineCode",{parentName:"a"},"imageflow-go"))," is an image manipulation library for Golang. ",(0,a.kt)("inlineCode",{parentName:"p"},"imageflow-node")," is binding for ",(0,a.kt)("inlineCode",{parentName:"p"},"libimageflow"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"imageflow-go")," uses cgo for communicating with rust side of code. It is written in Golang."),(0,a.kt)("h2",{id:"bust"},"Bust"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/anshulrgoyal/bust"},"Bust")," is cli tool for stress testing servers. It is a clobe of apache benchmark written in rust."),(0,a.kt)("h2",{id:"imdb-scrapper"},"Imdb Scrapper"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/anshulrgoyal/imdb-scrapper"},"IMDB scrapper")," is movies and tv show data scrapper from the IMDB website. It scraps data using cheerio and Node.js."),(0,a.kt)("h2",{id:"unbaked-potato"},"Unbaked Potato"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://unbakedpotato.herokuapp.com"},"unbaked potato")," is a simple blogging website written in Node.js and Angular."))}d.isMDXComponent=!0}}]);