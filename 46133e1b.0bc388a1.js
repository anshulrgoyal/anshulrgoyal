(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),s=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=s(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=s(n),d=r,m=l["".concat(i,".").concat(d)]||l[d]||b[d]||o;return n?a.a.createElement(m,c(c({ref:t},u),{},{components:n})):a.a.createElement(m,c({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},68:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return s}));var r=n(2),a=n(6),o=(n(0),n(105)),i={id:"projects",title:"Contributions and Projects"},c={unversionedId:"projects",id:"projects",isDocsHomePage:!1,title:"Contributions and Projects",description:"Docusaurus",source:"@site/docs/projects.md",permalink:"/anshulrgoyal/projects"},p=[{value:"Docusaurus",id:"docusaurus",children:[]},{value:"Imageflow",id:"imageflow",children:[{value:"Imageflow Node",id:"imageflow-node",children:[]},{value:"Imageflow Go",id:"imageflow-go",children:[]}]},{value:"Bust",id:"bust",children:[]},{value:"Imdb Scrapper",id:"imdb-scrapper",children:[]},{value:"Unbaked Potato",id:"unbaked-potato",children:[]}],u={rightToc:p};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"docusaurus"},"Docusaurus"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docusaurus.io"}),"Docusaurus")," is an open-source documentation website generation. I contributing docusaurus by creating tools to migrate docusaurus version 1 to version 2. I also updated CLI for better user experience and creating a design for option and config validation provided to plugin and themes."),Object(o.b)("h2",{id:"imageflow"},"Imageflow"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"imageflow")," provides operation for GIF, PNG, WebP and JPEG. The batch operations can be performed using API which creates a directed graph."),Object(o.b)("h3",{id:"imageflow-node"},"Imageflow Node"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/imazen/imageflow-node"}),Object(o.b)("inlineCode",{parentName:"a"},"imageflow-node"))," is an image manipulation library for Node.js. ",Object(o.b)("inlineCode",{parentName:"p"},"imageflow-node")," is binding for ",Object(o.b)("inlineCode",{parentName:"p"},"libimageflow"),". ",Object(o.b)("inlineCode",{parentName:"p"},"imageflow-node")," uses NAPI for communicating with rust side of code. It is written in Rust and Typescript."),Object(o.b)("h3",{id:"imageflow-go"},"Imageflow Go"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/imazen/imageflow-go"}),Object(o.b)("inlineCode",{parentName:"a"},"imageflow-go"))," is an image manipulation library for Golang. ",Object(o.b)("inlineCode",{parentName:"p"},"imageflow-node")," is binding for ",Object(o.b)("inlineCode",{parentName:"p"},"libimageflow"),". ",Object(o.b)("inlineCode",{parentName:"p"},"imageflow-go")," uses cgo for communicating with rust side of code. It is written in Golang."),Object(o.b)("h2",{id:"bust"},"Bust"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/anshulrgoyal/bust"}),"Bust")," is cli tool for stress testing servers. It is a clobe of apache benchmark written in rust."),Object(o.b)("h2",{id:"imdb-scrapper"},"Imdb Scrapper"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/anshulrgoyal/imdb-scrapper"}),"IMDB scrapper")," is movies and tv show data scrapper from the IMDB website. It scraps data using cheerio and Node.js."),Object(o.b)("h2",{id:"unbaked-potato"},"Unbaked Potato"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"http://unbakedpotato.herokuapp.com"}),"unbaked potato")," is a simple blogging website written in Node.js and Angular."))}s.isMDXComponent=!0}}]);